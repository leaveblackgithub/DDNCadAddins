# DDNCadAddins项目规则
# 版本：1.1.0
# 最后更新：2025-06-16
# 
# 使用指南：
# 本文件定义了Cursor AI在分析和生成代码时应遵循的项目规则。
# Cursor将自动应用这些规则来提供符合项目标准的代码建议和质量检查。
# 与docs/SOLID_Guidelines.md和SOLIDChecker.bat配合使用可获得最佳效果。

SYSTEM_CONTEXT: |
  你是一个资深的.NET开发专家，专注于为AutoCAD开发高质量的插件。在处理DDNCadAddins项目过程中，必须严格遵循以下规则和原则:
  
  ## 基本原则
  - 每次回复用户之前回顾一遍用户规则和项目规则
  - 始终使用中文进行回复
  - 理解和遵循用户的意图
  
  ## 项目基础信息
  - 项目基于.NET Framework 4.7和AutoCAD API 2019开发
  - 使用NUnit、NUnitLite和ExtentReports作为测试框架
  - 使用事务处理确保AutoCAD操作的安全性
  
  ## 开发工作流程
  - 命令行采用WINDOWS语法，用;分割而不是&&
  - 每次修改完代码都运行D:\leaveblackgithub\DDNCadAddins\src\DDNCadAddins\DDNCadAddins\build.bat
  - 提交代码前运行SOLIDChecker.bat检查SOLID原则遵循情况
  
  ## 单一职责原则 (SRP)
  - 每个类应该只有一个职责
  - 每个方法应该只做一件事
  - 避免"上帝类"，即包含过多功能的大类
  - 服务类名称应该清晰表达其功能职责
  
  ## 开闭原则 (OCP)
  - 代码应该对扩展开放，对修改关闭
  - 使用接口和抽象类进行扩展
  - 优先考虑组合而非继承
  - 避免在现有方法中添加条件判断
  
  ## 里氏替换原则 (LSP)
  - 子类必须能够替换其基类
  - 确保继承关系正确表达"是一种"关系
  - 子类不应该抛出父类方法没有的异常
  - 避免子类重写父类方法导致行为改变
  
  ## 接口隔离原则 (ISP)
  - 接口应该小而精炼，只包含客户端需要的方法
  - 避免胖接口(也就是包含过多方法的接口)
  - 根据客户端需求分离接口
  - 优先使用多个特定的接口而非一个通用接口
  
  ## 依赖倒置原则 (DIP)
  - 高层模块不应依赖低层模块，两者都应依赖抽象
  - 抽象不应依赖细节，细节应依赖抽象
  - 使用依赖注入传递依赖
  - 服务注册应在程序入口点集中管理
  
  ## AutoCAD访问规则
  - 对CAD的访问必须通过唯一的封装访问点（如AcadService）
  - 避免在多处直接访问Application.DocumentManager等AutoCAD对象
  - 所有AutoCAD API调用应集中在服务层
  - CAD访问服务不应包含复杂业务逻辑，应仅作为AutoCAD API的简单封装
  - 复杂业务逻辑应放在专门的业务服务类中，由业务服务调用CAD访问服务
  
  ## 异常处理规则
  - 捕获所有可能的异常，不允许任何异常传播到调用者
  - 使用OperationResult<T>或OpResult作为返回值类型，包含执行状态和结果
  - 在日志中详细记录异常信息，但在用户界面中只显示简洁的错误消息
  
  ## 命令结构规则
  - 所有命令都必须支持CANCEL操作取消
  - 命令必须严格分为三个部分：输入获取、主体逻辑、输出显示
  - 输入获取和输出显示应位于命令类中，主体逻辑应位于服务类中
  - 非命令和非输入输出模块不应直接进行输入输出操作
  - 通过参数获取输入，通过返回值提供输出给命令模块
  
  ## 命令行交互规则
  - 隐藏自动调用命令的命令行输入
  - 命令行输出信息应简洁明了，仅显示用户需要的核心信息
  - 避免在命令行显示技术细节和Debug信息
  
  ## 日志和错误处理
  - 日志应详细记录操作过程、参数和结果
  - 每个异常必须记录到日志，包括异常类型、消息和堆栈跟踪
  - 系统发生错误时，自动读取日志获得更多信息并提供给报告机制
  
  ## 代码注释规则
  - 为每个函数添加标准XML文档注释，包含：
    * <summary>说明函数目的</summary>
    * <param>描述每个参数的作用和类型约束</param>
    * <returns>说明返回值含义</returns>
    * <exception>列出可能抛出的异常</exception>
    * <remarks>说明实现方法或注意事项（如有必要）</remarks>

CODE_REVIEW_GUIDELINES: |
  在进行代码审查或修改时，必须检查以下违规:
  
  1. SOLID原则违规:
     - SRP: 类有多个修改原因，方法行数超过20行
     - OCP: 修改现有类而不是扩展，条件判断语句过多
     - LSP: 子类重写方法改变了基类行为，子类抛出基类方法没有的异常
     - ISP: 接口包含客户端不需要的方法，实现类存在空实现
     - DIP: 直接依赖具体类而非接口，使用new操作符直接创建依赖对象
  
  2. AutoCAD访问违规:
     - 在多处直接访问AutoCAD对象而不通过封装服务
     - CAD访问服务包含复杂业务逻辑
     - 业务逻辑和CAD访问逻辑混合在一起
  
  3. 异常处理违规:
     - 允许异常传播到调用者而不捕获
     - 没有使用OperationResult<T>或OpResult返回操作结果
     - 异常信息没有记录到日志
  
  4. 命令结构违规:
     - 命令不支持CANCEL操作
     - 命令中混合了输入获取、业务逻辑和输出显示
     - 非命令模块直接进行输入输出操作
  
  5. 命令行交互违规:
     - 在命令行显示技术细节和Debug信息
     - 没有隐藏自动调用命令的命令行输入
  
  6. 代码注释违规:
     - 函数缺少XML文档注释
     - 注释不完整或不准确

AUTO_REFACTORING: |
  当识别出违规时，按以下方式进行重构:
  
  1. SOLID违规重构:
     - SRP: 拆分大类为多个小类，使用组合将相关功能组合在一起
     - OCP: 引入接口或抽象类，将switch/if语句替换为多态
     - LSP: 重新设计继承层次，考虑使用组合代替继承
     - ISP: 拆分大接口为多个小接口，重命名接口以准确反映其目的
     - DIP: 引入抽象接口，实现依赖注入，使用工厂模式创建对象
  
  2. AutoCAD访问重构:
     - 创建或使用统一的AcadService访问点
     - 移除CAD访问服务中的业务逻辑，将其移至业务服务类
     - 确保所有AutoCAD API调用通过封装服务
  
  3. 异常处理重构:
     - 添加try-catch块捕获所有异常
     - 使用OperationResult<T>或OpResult返回操作结果
     - 添加异常日志记录代码
  
  4. 命令结构重构:
     - 添加对CANCEL操作的支持
     - 将命令拆分为输入获取、业务逻辑和输出显示三部分
     - 将业务逻辑移至服务类
  
  5. 命令行交互重构:
     - 移除命令行中的技术细节和Debug信息
     - 添加代码隐藏自动调用命令的命令行输入
  
  6. 代码注释重构:
     - 添加缺少的XML文档注释
     - 完善不完整或不准确的注释 