# AutoCAD资源管理规则
# 版本：1.0.0
# 最后更新：2024-06-28
# 
# 使用指南：
# 本文件定义了AutoCAD对象的资源管理规则，明确区分必须释放和不应释放的对象。
# 开发插件时应严格遵循这些规则，确保资源正确管理和释放。

## 一、必须显式释放的AutoCAD对象

### 1. 事务类对象
- **Transaction**: 必须通过Commit()或Abort()后调用Dispose()
  ```csharp
  using (Transaction tr = db.TransactionManager.StartTransaction())
  {
      // 操作代码
      tr.Commit();
  } // 自动调用Dispose()
  ```
- **OpenCloseTransaction**: 使用完必须释放
- **SubTransaction**: 必须提交或回滚并释放

### 2. 数据库对象
- **DBObject**: 手动通过UpgradeOpen()/DowngradeOpen()打开的对象需要Close()
- **BlockTableRecord**和其他TableRecord: 手动打开后需要Close()
- **DBDictionary**: 手动打开后需要Close()
- **自定义创建的Database对象**: 不再使用时应调用Dispose()

### 3. 选择集对象
- **SelectionSet**: 使用完后需调用Dispose()
- **Editor.GetSelection()返回的PromptSelectionResult**: 使用完需释放

### 4. 锁定对象
- **Document.LockDocument()**: 必须配对调用UnlockDocument()
  ```csharp
  doc.LockDocument();
  try
  {
      // 操作代码
  }
  finally
  {
      doc.UnlockDocument();
  }
  ```

### 5. 图形对象
- **自定义创建并添加到数据库的Entity对象**: 确保在事务中提交
- **临时图形对象(Transient Entity)**: 使用完后需移除并释放

## 二、不应手动释放的AutoCAD对象

### 1. 文档和应用程序对象
- **Document对象**: 由AutoCAD管理生命周期，不要手动Dispose
- **Application对象**: 全局单例，不要尝试释放
- **DocumentCollection**: 由AutoCAD管理，不要释放

### 2. 管理器对象
- **Database**: 通常绑定到Document，不要手动释放(除非是自己创建的)
- **TransactionManager**: 由Database管理，不要释放
- **LayerManager**: 由AutoCAD管理，不要释放
- **BlockManager**: 由AutoCAD管理，不要释放

### 3. 编辑器和命令对象
- **Editor**: 由Document管理，不要释放
- **Command对象**: 由AutoCAD管理，不要释放
- **CommandMethod类型的方法**: 框架负责管理

### 4. 已加入事务的对象
- **通过事务获取的Entity/DBObject**: 事务负责管理，不要手动释放
  ```csharp
  using (Transaction tr = db.TransactionManager.StartTransaction())
  {
      // 通过事务获取的对象由事务管理，不要手动Close
      BlockTable bt = tr.GetObject(db.BlockTableId, OpenMode.ForRead) as BlockTable;
      
      // 事务结束时自动处理这些对象
      tr.Commit();
  }
  ```

## 三、资源管理最佳实践

### 1. 使用using语句自动处理IDisposable对象
```csharp
using (Transaction tr = db.TransactionManager.StartTransaction())
{
    // 操作代码
    tr.Commit();
} // 自动调用Dispose()
```

### 2. 使用try-finally结构确保资源释放
```csharp
Document doc = Application.DocumentManager.MdiActiveDocument;
doc.LockDocument();
try
{
    // 文档操作代码
}
finally
{
    doc.UnlockDocument();
}
```

### 3. 通过AcadService统一管理资源
- 封装常用操作，确保资源正确释放
- 避免在多处手动管理相同资源
- 集中处理异常和资源释放逻辑

### 4. 事务使用规范
- 事务应尽可能短小
- 避免在事务中执行耗时操作
- 事务结束前必须调用Commit或Abort
- 确保事务在所有情况下都能正确结束（try-finally）

### 5. Document锁定规范
- 锁定时间应尽可能短
- 避免在锁定区域执行UI操作或等待用户输入
- 确保在异常情况下也能解锁（try-finally）
- 考虑使用DisableUndoRecording简化非关键操作 